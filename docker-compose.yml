services:
  # PostgreSQL数据库
  postgres:
    image: postgres:17.5
    container_name: rag_postgres
    environment:
      POSTGRES_DB: rag_db
      POSTGRES_USER: rag_user
      POSTGRES_PASSWORD: rag_password
      POSTGRES_INITDB_ARGS: "--encoding=UTF8 --locale=C"
    ports:
      - "5433:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/init-db.sql:/docker-entrypoint-initdb.d/init-db.sql
    networks:
      - rag_network
    restart: unless-stopped
    command: >
      postgres -c shared_preload_libraries=pg_stat_statements
               -c track_activity_query_size=2048
               -c pg_stat_statements.track=all
               -c max_connections=200
               -c shared_buffers=256MB
               -c effective_cache_size=1GB

  # Elasticsearch向量数据库
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.15.3
    container_name: rag_elasticsearch
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
      - "ES_JAVA_OPTS=-Xms2g -Xmx2g"
      - cluster.name=rag-cluster
      - node.name=rag-node
      - bootstrap.memory_lock=true
      - network.host=0.0.0.0
    ulimits:
      memlock:
        soft: -1
        hard: -1
    ports:
      - "9200:9200"
      - "9300:9300"
    volumes:
      - es_data:/usr/share/elasticsearch/data
    networks:
      - rag_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:9200/_cluster/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5

  # Redis缓存
  redis:
    image: redis:7.2-alpine
    container_name: rag_redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - rag_network
    restart: unless-stopped
    command: >
      redis-server
      --appendonly yes
      --appendfsync everysec
      --maxmemory 512mb
      --maxmemory-policy allkeys-lru
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Spring Boot后端服务
  backend:
    build: 
      context: ./backend
      dockerfile: Dockerfile
    container_name: rag_backend
    ports:
      - "8080:8080"
    environment:
      - SPRING_PROFILES_ACTIVE=docker
      - SPRING_DATASOURCE_URL=jdbc:postgresql://postgres:5432/rag_db
      - SPRING_DATASOURCE_USERNAME=rag_user
      - SPRING_DATASOURCE_PASSWORD=rag_password
      - SPRING_ELASTICSEARCH_URIS=http://elasticsearch:9200
      - SPRING_DATA_REDIS_HOST=redis
      - SPRING_DATA_REDIS_PORT=6379
      - OLLAMA_BASE_URL=http://host.docker.internal:11434
      - JAVA_OPTS=-Xmx3g -Xms1g -XX:+UseG1GC -XX:MaxGCPauseMillis=200
      - MANAGEMENT_ENDPOINTS_WEB_EXPOSURE_INCLUDE=health,info,metrics
      - MANAGEMENT_ENDPOINT_HEALTH_SHOW_DETAILS=always
      - LOGGING_LEVEL_COM_EXAMPLE_RAG=DEBUG
    depends_on:
      postgres:
        condition: service_started
      elasticsearch:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - rag_network
    restart: unless-stopped
    volumes:
      - ./backend/logs:/app/logs
      - ./uploads:/app/uploads
    extra_hosts:
      - "host.docker.internal:host-gateway"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s

  # Vue前端服务
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: rag_frontend
    ports:
      - "3000:80"
    depends_on:
      - backend
    networks:
      - rag_network
    restart: unless-stopped

  # Nginx反向代理（可选）
  nginx:
    image: nginx:1.25-alpine
    container_name: rag_nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/conf.d:/etc/nginx/conf.d
      - ./nginx/ssl:/etc/nginx/ssl
    depends_on:
      - frontend
      - backend
    networks:
      - rag_network
    restart: unless-stopped

volumes:
  postgres_data:
    driver: local
  es_data:
    driver: local
  redis_data:
    driver: local

networks:
  rag_network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16 